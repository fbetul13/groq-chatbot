{"id": "M01", "answer": "888"}
{"id": "M02", "answer": "19/10"}
{"id": "M03", "answer": "9/2"}
{"id": "M04", "answer": "220"}
{"id": "M05", "answer": "2/5 * 3/7 = 6/35"}
{"id": "M06", "answer": "2^5 = 32, 2^3 = 8, 2^4 = 16\n32 * 8 = 256\n256 / 16 = 16"}
{"id": "M07", "answer": "3.14 * 7 * 7 \n3.14 * 49 \n153.86"}
{"id": "M08", "answer": "2,3"}
{"id": "M09", "answer": "20*(4+73)/2\n20*77/2\n20*38.5\n770"}
{"id": "M10", "answer": "7"}
{"id": "T01", "answer": "A"}
{"id": "T02", "answer": "C)"}
{"id": "T03", "answer": "B"}
{"id": "T04", "answer": "B"}
{"id": "T05", "answer": "B)"}
{"id": "T06", "answer": "B"}
{"id": "T07", "answer": "B"}
{"id": "T08", "answer": "A"}
{"id": "T09", "answer": "B)"}
{"id": "T10", "answer": "C)"}
{"id": "C01", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]"}
{"id": "C02", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True"}
{"id": "C03", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"id": "C04", "code": "def two_sum(nums: list[int], target: int) -> tuple[int, int]:\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return i, j\n    return None"}
{"id": "C05", "code": "def is_palindrome(s: str) -> bool:\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]"}
{"id": "C06", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"id": "C07", "code": "def are_anagrams(a: str, b: str) -> bool:\n    a = a.replace(\" \", \"\").lower()\n    b = b.replace(\" \", \"\").lower()\n    return sorted(a) == sorted(b)"}
{"id": "C08", "code": "def unique_elements(xs: list) -> list:\n    seen = set()\n    return [x for x in xs if not (x in seen or seen.add(x))]"}
{"id": "C09", "code": "def is_brackets_balanced(s: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n                \n    return not stack"}
{"id": "C10", "code": "def longest_common_prefix(strs: list[str]) -> str:\n    if not strs:\n        return \"\"\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in strs:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str"}

{"id":"M01","answer":"888"}
{"id":"M02","answer":"13/10"}
{"id":"M03","answer":"9"}
{"id":"M04","answer":"220"}
{"id":"M05","answer":"5/14"}
{"id":"M06","answer":"16"}
{"id":"M07","answer":"153.86"}
{"id":"M08","answer":"2,3"}
{"id":"M09","answer":"650"}
{"id":"M10","answer":"7"}
{"id":"T01","answer":"A"}
{"id":"T02","answer":"C"}
{"id":"T03","answer":"B"}
{"id":"T04","answer":"B"}
{"id":"T05","answer":"B"}
{"id":"T06","answer":"B"}
{"id":"T07","answer":"B"}
{"id":"T08","answer":"A"}
{"id":"T09","answer":"B"}
{"id":"T10","answer":"C"}
{"id":"C01","code":"def reverse_string(s: str) -> str:\n    return s[::-1]"}
{"id":"C02","code":"def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return n == 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"id":"C03","code":"def fibonacci(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"id":"C04","code":"def two_sum(nums, target):\n    seen = {}\n    best = None\n    for j, v in enumerate(nums):\n        need = target - v\n        if need in seen:\n            i = seen[need]\n            pair = (i, j) if i < j else (j, i)\n            if best is None or pair < best:\n                best = pair\n        if v not in seen:\n            seen[v] = j\n    return None if best is None else best"}
{"id":"C05","code":"def is_palindrome(s: str) -> bool:\n    filtered = [ch.lower() for ch in s if ch.isalnum()]\n    return filtered == filtered[::-1]"}
{"id":"C06","code":"def factorial(n: int) -> int:\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n    return res"}
{"id":"C07","code":"def are_anagrams(a: str, b: str) -> bool:\n    a = ''.join(a.split()).lower()\n    b = ''.join(b.split()).lower()\n    if len(a) != len(b):\n        return False\n    counts = {}\n    for ch in a:\n        counts[ch] = counts.get(ch, 0) + 1\n    for ch in b:\n        if ch not in counts:\n            return False\n        counts[ch] -= 1\n        if counts[ch] == 0:\n            del counts[ch]\n    return not counts"}
{"id":"C08","code":"def unique_elements(xs):\n    seen = set()\n    out = []\n    for x in xs:\n        if x not in seen:\n            seen.add(x)\n            out.append(x)\n    return out"}
{"id":"C09","code":"def is_brackets_balanced(s: str) -> bool:\n    pairs = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for ch in s:\n        if ch in '([{':\n            stack.append(ch)\n        elif ch in ')]}':\n            if not stack or stack[-1] != pairs[ch]:\n                return False\n            stack.pop()\n    return not stack"}
{"id":"C10","code":"def longest_common_prefix(strs):\n    if not strs:\n        return ''\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return ''\n    return prefix"}

{"id": "M01", "answer": "888"}
{"id": "M02", "answer": "34/10 = 17/5"}
{"id": "M03", "answer": "17/9"}
{"id": "M04", "answer": "220/1"}
{"id": "M05", "answer": "20/323"}
{"id": "M06", "answer": "2^5 = 32\n2^3 = 8\n32 Ã— 8 = 256\n256 / 2^4 = 256 / 16 = 16"}
{"id": "M07", "answer": "(3.14 * 7^2) / 2 = 153.08"}
{"id": "M08", "answer": "-2, 3"}
{"id": "M09", "answer": "20/2 * (4 + 4 + 19*3) = 10 * (8 + 57) = 10 * 65 = 650"}
{"id": "M10", "answer": "3.0"}
{"id": "T01", "answer": "A"}
{"id": "T02", "answer": "C"}
{"id": "T03", "answer": "B"}
{"id": "T04", "answer": "B"}
{"id": "T05", "answer": "D"}
{"id": "T06", "answer": "B"}
{"id": "T07", "answer": "B"}
{"id": "T08", "answer": "A"}
{"id": "T09", "answer": "B"}
{"id": "T10", "answer": "C"}
{"id": "C01", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]"}
{"id": "C02", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True"}
{"id": "C03", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"id": "C04", "code": "def two_sum(nums: list[int], target: int) -> tuple[int, int]:\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if target - num in num_dict:\n            return (num_dict[target - num], i)\n        num_dict[num] = i\n    return (-1, -1)"}
{"id": "C05", "code": "def is_palindrome(s: str) -> bool:\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]"}
{"id": "C06", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"id": "C07", "code": "def are_anagrams(a: str, b: str) -> bool:\n    return sorted(a.lower().replace(\" \", \"\")) == sorted(b.lower().replace(\" \", \"\"))"}
{"id": "C08", "code": "def unique_elements(xs: list) -> list:\n    return list(dict.fromkeys(xs))"}
{"id": "C09", "code": "def is_brackets_balanced(s: str) -> bool:\n    stack = []\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in s:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n\n    return not stack"}
{"id": "C10", "code": "def longest_common_prefix(strs: list[str]) -> str:\n    if not strs:\n        return \"\"\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in strs:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str"}
